import { GetBasketApi } from '@/src/api/getBasket';
import { View, Text, ScrollView, Image, TouchableOpacity, StyleSheet, ActivityIndicator, RefreshControl, Pressable } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { router, useFocusEffect } from 'expo-router';
import React,{ use, useCallback, useState } from 'react';
import { useDeliveryStore } from '@/src/store/useDeliveryStore';
import { UpdateBasketItemApi } from '@/src/api/updatebasketitemscount';
// =========================================================
// 1. –ò–ù–¢–ï–†–§–ï–ô–°–´ (–û—Å—Ç–∞–≤–ª—è–µ–º, –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –≤—ã–Ω–æ—Å–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ)
// =========================================================

export interface BasketResponse {
  code: string;
  subTotal: string;
  shipping: string;
  total: string;
  discount: string;
  bal: string | null;
  warningText: string;
  merchantItems: MerchantItem[];
  delivery: Delivery;
  shippingType: string;
  shippingTypes: ShippingType[];
  deliveryTimesToday: DeliveryTime[];
  deliveryTimesTomorrow: DeliveryTime[];
  paymentType: string;
}

export interface MerchantItem {
  responseTitle: string;
  paymentTypes: PaymentType[];
  store: Store;
  shipping: string;
  subTotal: string;
  groupedLineItems: GroupedLineItem[];
}

export interface PaymentType {
  name: string; // "MONEYORDER" | "CREDITCARD" | "ONLINEPAYMENT"
  text: string;
}

export interface Store {
  id: number;
  name: string;
  code: string;
  storeLogo: string;
  shippingDesc: string | null;
}

export interface GroupedLineItem {
  type: string;
  correction: boolean;
  lineItems: LineItem[];
}

export interface LineItem {
  id: number;
  quantity: number;
  itemPrice: string;
  subTotal: string;
  product: Product;
  availability: Availability;
  paymentType: string;
}

export interface Product {
  id: number;
  description: {
    name: string;
    description: string | null;
  };
  image: {
    imageUrl: string;
    externalUrl: string | null;
  };
}

export interface Availability {
  id: number;
  description: {
    name: string | null;
    description: string | null;
  };
}

export interface Delivery {
  name: string | null;
  region: string | null;
  address: string | null;
  telephone: string | null;
}

export interface ShippingType {
  name: string;
  text: string;
  desc: string;
}

export interface DeliveryTime {
  id: number;
  lastTime: string;
  startTime: string;
  endTime: string;
  sortOrder: number;
}


// =========================================================
// 2. –•–£–ö –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ö–û–†–ó–ò–ù–´
// =========================================================

export const useBasketQuery = () => {
  return useQuery<BasketResponse, Error>({
    queryKey: ['basket'], // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
    queryFn: GetBasketApi, // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
    staleTime: 1000 * 60 * 1, // –ö–µ—à —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–≤–µ–∂–∏–º 5 –º–∏–Ω—É—Ç
    retry: 2, // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É 2 —Ä–∞–∑–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  });
};

// =========================================================
// 3. –ö–û–ú–ü–û–ù–ï–ù–¢ –≠–ö–†–ê–ù–ê
// =========================================================

export default function BasketScreen() {
  const [quantities, setQuantities] = useState<{ [key: number]: number }>({});

const queryClient = useQueryClient();
const handleQuantityChange = async (lineItemId: number, newQuantity: number,) => {
  try {
    await UpdateBasketItemApi(lineItemId, newQuantity,);
    await queryClient.invalidateQueries({ queryKey: ["basket"] });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:", error);
  }
};
  // –ó–∞–º–µ–Ω—è–µ–º useState/useEffect –Ω–∞ useQuery
  const { 
    data: basket, 
    isLoading, 
    isError, 
    error,
    refetch, 
    isFetching 
  } = useBasketQuery(); 

      const setDeliveryTimesToday = useDeliveryStore(
    (state) => state.setDeliveryTimesToday
  );
  const setDeliveryTimesTomorrow = useDeliveryStore(
    (state) => state.setDeliveryTimesTomorrow
  );
   const setCode = useDeliveryStore(
    (state) => state.setCode
  );



   useFocusEffect(
    useCallback(() => {
      refetch();
    }, [refetch])
  );
  
  // --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ó–∞–≥—Ä—É–∑–∫–∏ –∏ –û—à–∏–±–∫–∏ ---

  if (isLoading) {
    return (
      <View style={styles.centerContainer}>
        <ActivityIndicator size="large" color="#4F46E5" />
        <Text className="mt-4 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</Text>
      </View>
    );
  }

  if (isError) {
    // –í React Native/Expo –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º. –í—ã–≤–æ–¥–∏–º –µ—ë –¥–ª—è –¥–µ–±–∞–≥–∞.
    console.error("Basket Query Error:", error); 
    return (
      <View style={styles.centerContainer}>
        <Text className="text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: </Text>
        <Text className="text-red-500 text-sm">{error.message}</Text>
      </View>
    );
  }
   const refreshControl = (
    <RefreshControl
      // –£–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      refreshing={isFetching} 
      // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ "–ø–æ—Ç—è–≥–∏–≤–∞–Ω–∏–∏"
      onRefresh={refetch} 
      // –¶–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (Android)
      tintColor="#4F46E5" 
      // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (Android)
      progressBackgroundColor="#FFFFFF" 
    />
  );

  if (!basket || basket.merchantItems.length === 0) {
    return (
      <View style={styles.centerContainer}>
        <Text className="text-lg text-gray-700">üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</Text>
        <TouchableOpacity 
           className="mt-5 bg-blue-500 p-3 rounded-md items-center"
           onPress={() => router.push('/(tabs)/(home)')}
        >
             <Text className="text-white font-bold">–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏</Text>
        </TouchableOpacity>
      </View>
    );
  }


    const handleGoToCheckout = () => {
    const deliveryTimesToday = basket.deliveryTimesToday;
    const deliveryTimesTomorrow = basket.deliveryTimesTomorrow;
    const code = basket.code;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Zustand store
    setDeliveryTimesToday(deliveryTimesToday);
    setDeliveryTimesTomorrow(deliveryTimesTomorrow);
    setCode(code);

    router.push("/chekout");
  };



  

  // --- –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ ---
  return (
    <SafeAreaView edges={['bottom']} className="flex-1 bg-gray-100">
      <ScrollView className="flex-1" refreshControl={refreshControl}>
        {basket.merchantItems.map((merchantItem, index) => (
          <View key={index} className="bg-white m-2 p-4 rounded-lg ">
            
            {/* –ë–ª–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ */}
            <View className="flex-row items-center mb-3">
              <Image
                // üî• –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS, –∏–Ω–∞—á–µ Android –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                source={{ uri: `https://gipertm.com/merchantStore/image?code=${merchantItem.store.storeLogo}` }}
                style={styles.logoImage} // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
              />
               <Text className="text-lg font-bold ml-2">{merchantItem.store.name}</Text>
            </View>
           
            {/* –¢–æ–≤–∞—Ä—ã */}
           {merchantItem.groupedLineItems.map((group, groupIndex) => (
  <View key={groupIndex}>
    {group.lineItems.map((item) => {
      const quantity = item.quantity;

      return (
        <View key={item.id} className="flex-row my-2 border-t border-gray-100 pt-2">
          <Image
            source={{ uri: item.product.image.imageUrl }}
            style={styles.productImage}
          />
          <View className="flex-1 ml-4 justify-center">
            <Text className="font-semibold">{item.product.description.name}</Text>
            <Text className="text-gray-600">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}</Text>
            <Text className="font-bold mt-1 text-base">{item.itemPrice}</Text>
          </View>

          {/* –ö–æ–Ω—Ç—Ä–æ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ */}
          <View className="h-full gap-2 bg-gray-200 w-12 items-center">
            <Pressable
              onPress={() => handleQuantityChange(item.availability.id, quantity + 1)}
            >
              <Text className="text-[#5600B3] text-2xl">+</Text>
            </Pressable>

            <Text className="w-full text-center font-bold">{quantity}</Text>

            <Pressable
              onPress={() =>{
                handleQuantityChange(item.availability.id, Math.max(1, quantity - 1))
                }
              }
            >
              <Text className="text-[#5600B3] font-bold text-2xl">-</Text>
            </Pressable>
          </View>
        </View>
      );
    })}
  </View>
))}
          </View>
        ))}
      </ScrollView>
      
      {/* –ë–ª–æ–∫ –∏—Ç–æ–≥–æ–≤ */}
     
          {basket.shippingTypes.map((item) => (
             <View className='bg-yellow-500 px-5' key={item.text}> 
            <Text className='text-xs' >Supermarketden sargyt mukdary 200 manatdan ge√ßen √Ωagda√Ωynda, d√ºkanlarymyzda eltip bermek hyzmaty MUGT</Text>
             </View>
          ))}
     
      <View className="p-4 bg-white border-t border-gray-200 shadow-lg">
        <View className="flex-row justify-between mb-2">
          <Text className="text-xs text-gray-700">–°—É–º–º–∞</Text>
          <Text className="text-xs text-gray-800">{basket.subTotal}</Text>
        </View>
        <View className="flex-row justify-between mb-2">
          <Text className="text-xs text-gray-700">–î–æ—Å—Ç–∞–≤–∫–∞</Text>
          <Text className="text-xs text-gray-800">{basket.shipping}</Text>
        </View>
        <View className="flex-row justify-between mb-4 border-t border-gray-100 pt-2">
          <Text className="font-bold text-xl">–ò—Ç–æ–≥–æ</Text>
          <Text className="font-bold text-xl text-blue-600">{basket.total}</Text>
        </View>
        <TouchableOpacity
          className="bg-blue-600 p-4 rounded-md items-center shadow-md"
          onPress={handleGoToCheckout} // –õ—É—á—à–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        >
          <Text className="text-white text-lg font-bold">Sargydy tassyklamak</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

// =========================================================
// 4. –°–¢–ò–õ–ò (–î–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ Image)
// =========================================================

const styles = StyleSheet.create({
    centerContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#f9fafb',
    },
    logoImage: {
        width: 48, // w-12
        height: 48, // h-12
        borderRadius: 6, // rounded-md
    },
    productImage: {
        width: 80, // w-20
        height: 80, // h-20
        borderRadius: 6, // rounded-md
    },
});